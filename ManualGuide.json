
<!DOCTYPE html>
 <html>
   <head> 
      <title>Manual Guide</title>
      <style type="text/css">
        .paper {
             background-color: white;
             border-radius: 20px;
             padding-bottom: 10px;
             padding-top: 15px;
             border: 1px dotted;
          }
         #Info {
               cursor: pointer;
               text-align: center;
               font-size: 105%;
               margin-top: 8px;
               mardin-bottom: 20px;
               padding-top: 10px;
               padding-bottom: 10px;
           }
         #Info:active {
               border-bottom: 2px solid;
           }
      </style>
     </head>
   <body style="background-color: white">
    <div class="paper"></div>
    <div class="paper" id="Info">Learn more</div>
    <script type="text/javascript">
       var hand = document.getElementsByClassName("paper")[0]
       var resizebase = new Array()
       function onResize(e, f) { resizebase.push({ func: f, elem: e }); return resizebase }
       window.onresize = function() {
        for(var i = 0; i < resizebase.length; i++) { resizebase[i].func(resizebase[i].elem); } 
         }
         var paperWidth = 1920
         onResize(document.getElementsByClassName("paper")[0], function(e) { 
           var k = innerWidth/paperWidth
           if(innerWidth > paperWidth) { k = 1/k }
           if(innerHeight < innerWidth) {
           e.style.marginLeft = (innerWidth-innerHeight)/2*k + "px"
           e.style.width = (innerWidth-2*e.offsetLeft)+"px";
           document.getElementsByClassName("paper")[1].style.width = (innerWidth-2*e.offsetLeft)+"px"
           document.getElementsByClassName("paper")[1].style.marginLeft = (innerWidth-innerHeight)/2*k + "px"
            } else {
               e.style.width = innerWidth-80+"px"
               e.style.marginLeft = 40 + "px"
               document.getElementsByClassName("paper")[1].style.width = (innerWidth - 80) +"px"
               document.getElementsByClassName("paper")[1].style.marginLeft = 40 + "px"
              }
             if(e.offsetHeight < innerHeight) { 
                e.style.marginTop = (innerHeight-e.offsetHeight - document.getElementsByClassName("paper")[1].offsetHeight)/2 + "px" 
              }
          })
        document.getElementsByClassName("paper")[1].onclick = function() {
           window.open("https://github.io/Roseinfire")
          }
         function background(color, imageSource, paper_width) {
           var background=document.body
           background.style.backgroundColor = color
           if(imageSource) { background.style.backgroundImage = "url('" + imageSource + "')" }
           if(paper_width) { paperWidth = paper_width }
             }; window.onresize()
     </script>
    <script type="text/javascript">
     class keyword {
       constructor(start=[], end=[], recall=function() {}) {
          this.start = function(compl) {
              for(var i = 0; i < start.length; i++) { if(start[i]==compl) { return true } }
              return false
                  }
          this.end = function(compl) {
              for(var i = 0; i < end.length; i++) { if(end[i]==compl) { return true } }
              return false
              }
          this.recall = recall
          }
       }
         var keywords = []
         function pushkeyword(start_symbol, end_symbol, result) {
           keywords.push( new keyword(start_symbol, end_symbol, result) )
            }
         function read(data) {
           var iteration = null
           var res = ""
           var pos = -1; while(data[pos+1]) {
                 pos++; var change = null
                 for(var i = 0; i < keywords.length; i++) {
                   if(iteration && keywords[i] == iteration && keywords[i].end( data[pos] )) {
                      iteration.recall(res); res = ""; iteration = null;
                       }
                   if(!iteration && keywords[i].start( data[pos] )) { 
                     iteration = keywords[i]; change = true;
                       }
                     }
                  
                   if(iteration && !change) { res += data[pos] }
                   if(change) { change = null }
    
                   }; if(iteration) { iteration.recall(res) }
                } 
            var tempovar = null
            var tempotext = null
            var tempotype = null
            var tempowrite = null
            pushkeyword(["&"], [":"], function(res) { tempovar = res; })
            pushkeyword(["("], [")"], function(res) { 
                  try { 
                    eval("window." + tempovar + " = " + res);
                  } catch { 
                     console.error("Invalid variable: ", tempovar, "=", res)
                       }
                   tempovar = null
               }) 
            pushkeyword(["#"], ["*"], function(res) { tempotext = res;  tempowrite = null; })
            pushkeyword(["*"], [" ", `
`], function(res) { tempotype = res;  })
            pushkeyword(["@"], [" ", "{"], function(res) {
                try {
                  tempowrite = write(tempotext, tempotype, eval(res))
                  tempotext = null; tempotype = null;
                  } catch { console.error("Can't find link @" + res) }
               })
            pushkeyword("{", "}", function(res) { 
                 if(tempowrite) {
                  tempowrite.attribute(res)
                      }
               })
  
         function write(text, type, style) { 
          var element = (function () {
             try { 
                var res = document.createElement(type)
                if(text) { res.innerHTML = text }
                return res
                 } catch { 
                      console.warn("Element creation failed *" + type)
                      var err = document.createElement("p"); err.innerHTML = "creation error"
                      return err
                   }
               })()
              element.style = style
              truewrite(element)
              return element
          }
         HTMLElement.prototype.attribute = function(data) { 
              try {
                   eval("this." + data) 
                   searchspecs(this, data)
                 } catch { console.error("Can't declare attribute: ", data) }
          }
        function truewrite(e) { hand.append(e) }
        var specs = []
        function searchspecs(element, data) {
           for(var i = 0; i < specs.length; i++) {
                 if(specs[i].tag == element.tagName && specs[i].key == data) {
                   specs[i](element) 
                     }
                 }
           }
        specs.push({ tag: "IMG", key: "$", spec: function(e) {
           e.style.marginLeft="40px"
           e.onResize(function() {
                 e.width = hand.offsetWidth-80
                   })
            } })
    </script>
    <script type="text/javascript">
        background(__manual__.backgroundColor, __manual__.backgroundImage, __manual__.width)
        read(__manual__.innerHTML)
      </script>
   </body>
 </html>
